name: common set Matrix for terraform projects

on:
  workflow_call:
    inputs:
      project:
        required: false
        type: string
    outputs:
      project-name:
        description: "project name to run"
        value: ${{ jobs.set-matrix.outputs.project-name }}

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      project-name: ${{steps.list_dirs.outputs.project-name}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: List files
        run: |
          pwd 
          ls -al 

      - name: Input Test
        run: |
            echo "project-name=${{ github.event.inputs.project-name }}"
      - name: GitHub Context Debug
        run: |
            echo "github.ref=${{ github.ref }}"
            echo "github.base_ref=${{ github.base_ref }}"
            echo "github.head_ref=${{ github.head_ref }}"
            echo "github.sha=${{ github.sha }}"
            echo "github.actor_id=${{ github.actor_id }}"
            echo "github.triggering_actor=${{ github.triggering_actor }}"
            echo "github.event_name=${{ github.event_name }}"
      - name: List available projects
        id: project_list
        run: |
              ls -al
              echo "-----------------------------------------------------------------------------"
              find . -name main.tf | sed s/"."// | sed s/"main.tf"// | sed 's/.$//' |jq -cnR '[inputs | select(length>0)]' | jq -c '.[]'
              export tfmain_folders=$(find . -name main.tf | sed s/"."// | sed s/"main.tf"// | sed 's/.$//' |jq -cnR '[inputs | select(length>0)]' | jq -c '.[]')
              echo "-----------------------------------------------------------------------------"
              echo "tfmain_folders=${tfmain_folders}"
              echo "-----------------------------------------------------------------------------"
              echo "Convert to array......"
              declare -a files_array=($(echo ${tfmain_folders} | tr "\n" " "))
              echo "file_array[0]: ${files_array[0]}"
              echo "-----------------------------------------------------------------------------"
    
              project_list=()
    
              for file in "${files_array[@]}"; do
                  echo "---------------------------------------------"
                  echo "File=$file"
    
                  export project_name=$(echo $file | awk -F "/" '{print $3}')
    
                  echo "Folder=$project_name"
                  project_list+=("${project_name}")
              done
              echo "-----------------------------------------------------------------------------"
              for project in "${project_list[@]}"; do
                echo "$project"
              done
              echo "projects=${project_list[@]}"  >> $GITHUB_OUTPUT
    
      - name: Verify available projects list
        run: |
          echo ${{ steps.project_list.outputs.projects }}
      - name: Get project directories
        id: list_dirs
        run: |
            export INPUT_PROJECT_NAME="${{ github.event.inputs.project-name  }}"
            echo "INPUT_PROJECT_NAME=$INPUT_PROJECT_NAME"
            echo "---------------------------------------------"
            echo "steps.project_list.outputs.projects=${{ steps.project_list.outputs.projects }}"
            echo "---------------------------------------------"
            export available_projects=$(echo "\"${{ steps.project_list.outputs.projects }}\"" | jq -c 'split(" ")')
            echo "available_projects=${available_projects}"
            echo "---------------------------------------------"
            
            
            if [ -z $INPUT_PROJECT_NAME ]; then
              echo "Project name is not provided. Run all projects."
              echo "project-name=${available_projects}" >> $GITHUB_OUTPUT
            else
              echo "Project name is provided. Only run with project-name"
              echo "project-name=[\"${{ github.event.inputs.project-name }}\"]" >> $GITHUB_OUTPUT
            fi
